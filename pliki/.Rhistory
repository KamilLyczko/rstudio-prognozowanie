data <- window(chicken, start=1960)
# Estimate parameters
fc <- forecast(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy") +
ylab("Oil (millions of tonnes)") + xlab("Year")
help(chicken)
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy") +
ylab("Ceny kurczaków w USA") + xlab("Year")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
library(fpp2)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
data <- read.csv("D:\Studia\Praca dyplomowa\pliki\dane_polska.xlsx")
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska.xlsx")
print(data)
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv")
print(data)
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv")
print(data$zachorowania)
help("read.csv")
print(data)
read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv", sep=";")
print(head(data)
)
data
head(data)
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv", sep=";")
clc
clear()
erase()
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv", sep=";")
data
head(data)
head(data$zachorowania)
plot(data$zachorowania, type="l")
is.ts(data)
inds <- seq(as.Date("2014-06-01"), as.Date("2015-10-14"), by = "day")
inds <- seq(as.Date("2020-03-05"), as.Date("2021-09-30"), by = "day")
c(2014, as.numeric(format(inds[1], "%j"))
)
inds
format(inds[1], "%j")
format(inds[1])
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
sum(month_days)
day_in_year
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
return day_in_year
}
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break;
day_in_year <- day_in_year + month_days[i];
}
return day_in_year
}
day_of_year_number <- function(date) {
date <- as.Date(date);
month_number <- as.numeric(format(date, "%m"));
day_number <- as.numeric(format(date, "%d"));
year_number <- as.numeric(format(date, "%y"));
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
day_in_year <- day_number;
for (i in 1:month_number) {
if(i==month_number)
break;
day_in_year <- day_in_year + month_days[i];
}
return day_in_year;
}
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
}
day_of_year_number("2016-01-02")
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
return(day_in_year)
}
day_of_year_number("2016-01-02")
day_of_year_number("2014-06-01")
day_of_year_number("2014-12-12")
day_of_year_number("2014-12-31")
day_of_year_number("2014-01-01")
!5
!0
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30);
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
if (!year_number %% 4 && month_number > 2)
day_in_year <- day_in_year + 1
return(day_in_year)
}
day_of_year_number("2013-03-01")
day_of_year_number("2012-03-01")
day_of_year_number("2012-0")
rm(inds)
rm(fc)
rm(month_days)
View(day_of_year_number)
View(data)
rm(data)
View(day_of_year_number)
save.image("D:/Studia/Praca dyplomowa/pliki/day_of_year_number_function.RData")
setwd("D:/Studia/Praca dyplomowa/R/rstudio-prognozowanie/pliki")
load("D:/Studia/Praca dyplomowa/R/rstudio-prognozowanie/pliki/.RData")
library(forecast)
library(ggplot2)
library(expsmooth)
library(GGally)
library(pdp)
library(stats)
library(ggtext)
?autoplot
confirmed1.train <- window(confirmed1, end = weekly_freq_day_number(length(confirmed1) - 30))
confirmed1.test <- window(confirmed1, start = weekly_freq_day_number(length(confirmed1) - 29))
c1_naive_forecasts <- naive_forecasts(confirmed1.train, 30)
train_dates <- window(data$date, end = length(confirmed1.train))
test_dates <- window(data$date, start = (length(confirmed1.train) + 1), end = length(confirmed1))
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = c1_naive_forecasts$naive$mean), aes(x, y)) +
geom_line() +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby zakażeń od ", title_time), x = "data", y = "liczba zakażeń") +
theme(plot.title = element_text(size = title_size), axis.text.x = element_markdown(angle = 45, hjust = 1))
rm(train_dates, test_dates, x_labs)
train_dates <- window(data$date, end = length(confirmed1.train))
test_dates <- window(data$date, start = (length(confirmed1.train) + 1), end = length(confirmed1))
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = c1_naive_forecasts$naive$x), aes(x, y)) +
geom_line() +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby zakażeń od ", title_time), x = "data", y = "liczba zakażeń") +
theme(plot.title = element_text(size = title_size), axis.text.x = element_markdown(angle = 45, hjust = 1))
rm(train_dates, test_dates, x_labs)
train_dates <- window(data$date, end = length(confirmed1.train))
test_dates <- window(data$date, start = (length(confirmed1.train) + 1), end = length(confirmed1))
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = c1_naive_forecasts$naive$x), aes(x, y)) +
geom_line() +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby zakażeń od "), x = "data", y = "liczba zakażeń") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
rm(train_dates, test_dates, x_labs)
train_dates <- window(data$date, end = length(confirmed1.train))
test_dates <- window(data$date, start = (length(confirmed1.train) + 1), end = length(confirmed1))
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = c1_naive_forecasts$naive$x), aes(x, y)) +
geom_line() +
#geom_line(data = data.frame(x = test_dates))
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby zakażeń od "), x = "data", y = "liczba zakażeń") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
x_labs
train_dates <- window(data$date, end = length(confirmed1.train))
test_dates <- window(data$date, start = (length(confirmed1.train) + 1), end = length(confirmed1))
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = c1_naive_forecasts$naive$x), aes(x, y)) +
geom_line() +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$naive$mean), aes(x, y))
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby zakażeń od "), x = "data", y = "liczba zakażeń") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
rm(train_dates, test_dates, x_labs)
train_dates <- window(data$date, end = length(confirmed1.train))
test_dates <- window(data$date, start = (length(confirmed1.train) + 1), end = length(confirmed1))
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = c1_naive_forecasts$naive$x), aes(x, y)) +
geom_line() +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$naive$mean), aes(x, y)) +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby zakażeń od "), x = "data", y = "liczba zakażeń") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
rm(train_dates, test_dates, x_labs)
?geom_line
train_dates <- window(data$date, end = length(confirmed1.train))
test_dates <- window(data$date, start = (length(confirmed1.train) + 1), end = length(confirmed1))
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = c1_naive_forecasts$naive$x), aes(x, y)) +
geom_line() +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$naive$mean), aes(x, y, colour = "red")) +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby zakażeń od "), x = "data", y = "liczba zakażeń") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
rm(train_dates, test_dates, x_labs)
train_dates <- window(data$date, end = length(confirmed1.train))
test_dates <- window(data$date, start = (length(confirmed1.train) + 1), end = length(confirmed1))
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = c1_naive_forecasts$naive$x), aes(x, y)) +
geom_line() +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$naive$mean), aes(x, y, a = "b")) +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby zakażeń od "), x = "data", y = "liczba zakażeń") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
rm(train_dates, test_dates, x_labs)
train_dates <- window(data$date, end = length(confirmed1.train))
test_dates <- window(data$date, start = (length(confirmed1.train) + 1), end = length(confirmed1))
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = c1_naive_forecasts$naive$x), aes(x, y)) +
geom_line() +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$naive$mean), aes(x, y, colour = "red", group = "a")) +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby zakażeń od "), x = "data", y = "liczba zakażeń") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
rm(train_dates, test_dates, x_labs)
train_dates <- window(data$date, end = length(confirmed1.train))
test_dates <- window(data$date, start = (length(confirmed1.train) + 1), end = length(confirmed1))
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = c1_naive_forecasts$naive$x), aes(x, y)) +
geom_line() +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$naive$mean), aes(x, y, colour = "a", group = "a")) +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby zakażeń od "), x = "data", y = "liczba zakażeń") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
rm(train_dates, test_dates, x_labs)
train_dates <- window(data$date, end = length(confirmed1.train))
test_dates <- window(data$date, start = (length(confirmed1.train) + 1), end = length(confirmed1))
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = c1_naive_forecasts$naive$x), aes(x, y)) +
geom_line() +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$naive$mean),
aes(x, y, colour = "Prosta metoda naiwna")) +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$snaive$mean),
aes(x, y, colour = "Sezonowa metoda naiwna")) +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$drift$mean),
aes(x, y, colour = "Przyrostowa metoda naiwna")) +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby zakażeń od "), x = "data", y = "liczba zakażeń") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
rm(train_dates, test_dates, x_labs)
train_dates <- window(data$date, end = length(confirmed1.train))
test_dates <- window(data$date, start = (length(confirmed1.train) + 1), end = length(confirmed1))
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = c1_naive_forecasts$naive$x), aes(x, y)) +
geom_line() +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$naive$mean),
aes(x, y, colour = "Prosta metoda naiwna")) +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$snaive$mean),
aes(x, y, colour = "Sezonowa metoda naiwna")) +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$drift$mean),
aes(x, y, colour = "Przyrostowa metoda naiwna")) +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby zakażeń od "), x = "data", y = "liczba zakażeń", color = "Prognozy") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
rm(train_dates, test_dates, x_labs)
train_dates <- window(data$date, end = length(confirmed1.train))
test_dates <- window(data$date, start = (length(confirmed1.train) + 1), end = length(confirmed1))
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = c1_naive_forecasts$naive$x), aes(x, y)) +
geom_line() +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$naive$mean),
aes(x, y, colour = "Prosta metoda naiwna")) +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$snaive$mean),
aes(x, y, colour = "Sezonowa metoda naiwna")) +
geom_line(data = data.frame(x = test_dates, y = c1_naive_forecasts$drift$mean),
aes(x, y, colour = "Przyrostowa metoda naiwna")) +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby zakażeń od "), x = "data", y = "liczba zakażeń", color = "Prognozy:") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
rm(train_dates, test_dates, x_labs)
#funkcja generująca wykres czasowy z szeregiem uczącym i prognozami metod naiwnych
generate_naive_forecasts_plot2 <- function(forecasts, title = "", ylab = "") {
train_dates <- window(data$date, end = length(forecasts$naive$x))
test_dates <- window(data$date, start = (length(forecasts$naive$x) + 1),
end = length(forecasts$naive$x) + 30)
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = forecasts$naive$x), aes(x, y)) +
geom_line() +
geom_line(data = data.frame(x = test_dates, y = forecasts$naive$mean),
aes(x, y, colour = "Prosta metoda naiwna")) +
geom_line(data = data.frame(x = test_dates, y = forecasts$snaive$mean),
aes(x, y, colour = "Sezonowa metoda naiwna")) +
geom_line(data = data.frame(x = test_dates, y = forecasts$drift$mean),
aes(x, y, colour = "Przyrostowa metoda naiwna")) +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = title, x = "data", y = "liczba zakażeń", color = "Prognozy:") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
}
generate_naive_forecasts_plot2(c1_naive_forecasts)
#funkcja generująca wykres czasowy z szeregiem uczącym i prognozami metod naiwnych
generate_naive_forecasts_plot2 <- function(ts, forecasts, title = "", ylab = "") {
train_dates <- as.Date(c(seq(get_date_of_obs_ts(get_index_of_obs(ts, 1)),
get_date_of_obs_ts(get_index_of_obs(ts, length(ts))), 1)))
test_dates <- window(data$date, start = (length(forecasts$naive$x) + 1),
end = length(forecasts$naive$x) + 30)
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = ts), aes(x, y)) +
geom_line() +
geom_line(data = data.frame(x = test_dates, y = forecasts$naive$mean),
aes(x, y, colour = "Prosta metoda naiwna")) +
geom_line(data = data.frame(x = test_dates, y = forecasts$snaive$mean),
aes(x, y, colour = "Sezonowa metoda naiwna")) +
geom_line(data = data.frame(x = test_dates, y = forecasts$drift$mean),
aes(x, y, colour = "Przyrostowa metoda naiwna")) +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = title, x = "data", y = "liczba zakażeń", color = "Prognozy:") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
}
#funkcja generująca wykres czasowy z szeregiem uczącym i prognozami metod naiwnych
generate_naive_forecasts_plot2 <- function(ts, forecasts, title = "", ylab = "") {
train_dates <- as.Date(c(seq(get_date_of_obs_ts(get_index_of_obs(ts, 1)),
get_date_of_obs_ts(get_index_of_obs(ts, length(ts))), 1)))
test_dates <- window(data$date, start = (length(forecasts$naive$x) + 1),
end = length(forecasts$naive$x) + 30)
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = ts), aes(x, y)) +
geom_line() +
geom_line(data = data.frame(x = test_dates, y = forecasts$naive$mean),
aes(x, y, colour = "Prosta metoda naiwna")) +
geom_line(data = data.frame(x = test_dates, y = forecasts$snaive$mean),
aes(x, y, colour = "Sezonowa metoda naiwna")) +
geom_line(data = data.frame(x = test_dates, y = forecasts$drift$mean),
aes(x, y, colour = "Przyrostowa metoda naiwna")) +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = title, x = "data", y = ylab, color = "Prognozy:") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
}
generate_naive_forecasts_plot2(confirmed1.train, c1_naive_forecasts, "a", "b")
confirmed4.train <- window(confirmed4, end = weekly_freq_day_number(length(confirmed4) - 30))
confirmed4.test <- window(confirmed4, start = weekly_freq_day_number(length(confirmed4) - 29))
c4_naive_forecasts <- naive_forecasts(confirmed4.train, 30)
generate_naive_forecasts_plot2(confirmed4.train, c4_naive_forecasts, "a", "b")
generate_naive_forecasts_plot2(window(confirmed4.train, start = weekly_freq_day_number(500)), c4_naive_forecasts, "a", "b")
View(data)
#funkcja generująca wykres czasowy z szeregiem uczącym i prognozami metod naiwnych
#używa funkcji ggplot(), umieszcza daty na osi x
generate_naive_forecasts_plot2 <- function(ts, forecasts, title = "", ylab = "") {
train_dates <- as.Date(c(seq(get_date_of_obs_ts(get_index_of_obs(ts, 1)),
get_date_of_obs_ts(get_index_of_obs(ts, length(ts))), 1)))
test_dates <- window(data$date, start = (length(forecasts$naive$x) + 1),
end = length(forecasts$naive$x) + 30)
x_labs <- c(seq(train_dates[1], test_dates[length(test_dates)], 20))
ggplot(data = data.frame(x = train_dates, y = ts), aes(x, y)) +
geom_line() +
geom_line(data = data.frame(x = test_dates, y = forecasts$naive$mean),
aes(x, y, colour = "Prosta metoda naiwna")) +
geom_line(data = data.frame(x = test_dates, y = forecasts$snaive$mean),
aes(x, y, colour = "Sezonowa metoda naiwna")) +
geom_line(data = data.frame(x = test_dates, y = forecasts$drift$mean),
aes(x, y, colour = "Przyrostowa metoda naiwna")) +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = title, x = "data", y = ylab, color = "Prognozy:") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
}
#funkcja generująca wykres czasowy z szeregiem testowym i prognozami metod naiwnych
#używa funkcji ggplot(), umieszcza daty na osi x
generate_naive_test_comparison_plot2 <- function(ts, forecasts, title = "", ylab = "") {
dates <- as.Date(c(seq(get_date_of_obs_ts(get_index_of_obs(ts, 1)),
get_date_of_obs_ts(get_index_of_obs(ts, length(ts))), 1)))
x_labs <- c(seq(dates[1], dates[length(dates)], 5))
ggplot(data = data.frame(x = dates, y = ts), aes(x, y)) +
geom_line() +
geom_line(data = data.frame(x = dates, y = forecasts$naive$mean),
aes(x, y, colour = "Prosta metoda naiwna")) +
geom_line(data = data.frame(x = dates, y = forecasts$snaive$mean),
aes(x, y, colour = "Sezonowa metoda naiwna")) +
geom_line(data = data.frame(x = dates, y = forecasts$drift$mean),
aes(x, y, colour = "Przyrostowa metoda naiwna")) +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = title, x = "data", y = ylab, color = "Prognozy:") +
theme(plot.title = element_text(size = 10), axis.text.x = element_markdown(angle = 45, hjust = 1))
}
generate_naive_test_comparison_plot2(confirmed4.test, c4_naive_forecasts, plot_title2, "liczba zakażeń")
generate_naive_test_comparison_plot2(confirmed4.test, c4_naive_forecasts, "plot_title2", "liczba zakażeń")
deaths_forecasts <- list()
for(i in 1:length(d_time_series)) {
train <- window(d_time_series[[i]], end = weekly_freq_day_number(length(d_time_series[[i]]) - 30))
test <- window(d_time_series[[i]], start = weekly_freq_day_number(length(d_time_series[[i]]) - 29))
deaths_forecasts[[i]] <- naive_forecasts(train, 30)
plot_title1 <- paste("Prognozy metody naiwnej liczby śmierci dla ", i, " fali")
plot_title2 <- paste("Porównanie prognoz liczby śmierci z szeregiem testowym dla ", i, " fali")
if(i != 4)
show(generate_naive_forecasts_plot2(train, deaths_forecasts[[i]], plot_title1, "liczba śmierci"))
else
show(generate_naive_forecasts_plot2(window(train, start = weekly_freq_day_number(500)),
deaths_forecasts[[i]], plot_title1, "liczba śmierci"))
show(generate_naive_test_comparison_plot2(test, deaths_forecasts[[i]], plot_title2, "liczba śmierci"))
}
rm(train, test, plot_title1, plot_title2, i, deaths_forecasts)
deaths_forecasts <- list()
for(i in 1:length(d_time_series)) {
train <- window(d_time_series[[i]], end = weekly_freq_day_number(length(d_time_series[[i]]) - 30))
test <- window(d_time_series[[i]], start = weekly_freq_day_number(length(d_time_series[[i]]) - 29))
deaths_forecasts[[i]] <- naive_forecasts(train, 30)
plot_title1 <- paste("Prognozy metody naiwnej liczby śmierci dla", i, "fali")
plot_title2 <- paste("Porównanie prognoz liczby śmierci z szeregiem testowym dla", i, "fali")
if(i != 4)
show(generate_naive_forecasts_plot2(train, deaths_forecasts[[i]], plot_title1, "liczba śmierci"))
else
show(generate_naive_forecasts_plot2(window(train, start = weekly_freq_day_number(500)),
deaths_forecasts[[i]], plot_title1, "liczba śmierci"))
show(generate_naive_test_comparison_plot2(test, deaths_forecasts[[i]], plot_title2, "liczba śmierci"))
}
rm(train, test, plot_title1, plot_title2, i, deaths_forecasts)
#Prognozy metod naiwnych liczby zakażeń dla I fali
confirmed1.train <- window(confirmed1, end = weekly_freq_day_number(length(confirmed1) - 30))
confirmed1.test <- window(confirmed1, start = weekly_freq_day_number(length(confirmed1) - 29))
c1_naive_forecasts <- naive_forecasts(confirmed1.train, 30)
plot_title1 <- "Prognozy metody naiwnej liczby zakażeń dla I fali"
plot_title2 <- "Porównanie prognoz liczby zakażeń z szeregiem testowym dla I fali"
generate_naive_forecasts_plot(confirmed1.train, c1_naive_forecasts, plot_title1, "liczba zakażeń")
generate_naive_test_comparison_plot(confirmed1.test, c1_naive_forecasts, plot_title2, "liczba zakażeń")
rm(confirmed1.train, confirmed1.test, c1_naive_forecasts, plot_title1, plot_title2)
#Prognozy metod naiwnych liczby zakażeń dla II fali
confirmed2.train <- window(confirmed2, end = weekly_freq_day_number(length(confirmed2) - 30))
confirmed2.test <- window(confirmed2, start = weekly_freq_day_number(length(confirmed2) - 29))
c2_naive_forecasts <- naive_forecasts(confirmed2.train, 30)
plot_title1 <- "Prognozy metody naiwnej liczby zakażeń dla II fali"
plot_title2 <- "Porównanie prognoz liczby zakażeń z szeregiem testowym dla II fali"
generate_naive_forecasts_plot(confirmed2.train, c2_naive_forecasts, plot_title1, "liczba zakażeń")
generate_naive_test_comparison_plot(confirmed2.test, c2_naive_forecasts, plot_title2, "liczba zakażeń")
rm(confirmed2.train, confirmed2.test, c2_naive_forecasts, plot_title1, plot_title2)
#Prognozy metod naiwnych liczby zakażeń dla III fali
confirmed3.train <- window(confirmed3, end = weekly_freq_day_number(length(confirmed3) - 30))
confirmed3.test <- window(confirmed3, start = weekly_freq_day_number(length(confirmed3) - 29))
c3_naive_forecasts <- naive_forecasts(confirmed3.train, 30)
plot_title1 <- "Prognozy metody naiwnej liczby zakażeń dla III fali"
plot_title2 <- "Porównanie prognoz liczby zakażeń z szeregiem testowym dla III fali"
generate_naive_forecasts_plot(confirmed3.train, c3_naive_forecasts, plot_title1, "liczba zakażeń")
generate_naive_test_comparison_plot(confirmed3.test, c3_naive_forecasts, plot_title2, "liczba zakażeń")
rm(confirmed3.train, confirmed3.test, c3_naive_forecasts, plot_title1, plot_title2)
#Prognozy metod naiwnych liczby zakażeń dla IV fali
confirmed4.train <- window(confirmed4, end = weekly_freq_day_number(length(confirmed4) - 30))
confirmed4.test <- window(confirmed4, start = weekly_freq_day_number(length(confirmed4) - 29))
c4_naive_forecasts <- naive_forecasts(confirmed4.train, 30)
plot_title1 <- "Prognozy metody naiwnej liczby zakażeń dla IV fali"
plot_title2 <- "Porównanie prognoz liczby zakażeń z szeregiem testowym dla IV fali"
generate_naive_forecasts_plot(window(confirmed4.train, start = weekly_freq_day_number(500)),
c4_naive_forecasts, plot_title1, "liczba zakażeń")
generate_naive_test_comparison_plot(confirmed4.test, c4_naive_forecasts, plot_title2, "liczba zakażeń")
rm(confirmed4.train, confirmed4.test, c4_naive_forecasts, plot_title1, plot_title2)
