install.packages("fpp2")
library(fpp2)
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
autoplot(a10) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") +
xlab("Year")
autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE) +
xlab("Year: 2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE, year.labels=TRUE) +
xlab("Year: 2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE, month.labels=TRUE) +
xlab("Year: 2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE, year.labels=TRUE) +
xlab("Year: 2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE, divideTime=12) +
xlab("Year: 2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE) +
xlab("Year: 2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia") +
divideTime(12)
library(fpp2)
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
source("~/.active-rstudio-document")
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
library(fpp2)
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(usnetelec, BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(usnetelec)
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(c(usnetelec, BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(c(usnetelec, BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(c(usnetelec, BoxCox(usnetelec, lambdaus)))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(usnetelec) +
autolayer(BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(usnetelec)
autoplot(BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambda
lambda
autoplot(usnetelec)
autoplot(BoxCox(usnetelec, lambda))
usgdp %>% BoxCox.lambda() -> lambda
lambda
autoplot(usgdp)
autoplot(BoxCox(usgdp, lambda))
mcopper %>% BoxCox.lambda() -> lambda
lambda
autoplot(mcopper)
autoplot(BoxCox(mcopper, lambda))
enplanements %>% BoxCox.lambda() -> lambdaus
lambda
autoplot(enplanements)
autoplot(BoxCox(enplanements, lambda))
cangas %>% BoxCox.lambda() -> lambda
lambda
autoplot(cangas)
autoplot(BoxCox(cangas, lambda))
library(fpp2)
beer2 <- window(ausbeer,start=1992)
ma4 <- ma(beer2, order=4, centre=FALSE)
ma2x4 <- ma(beer2, order=4, centre=TRUE)
ma4
ma2x4
beer2 <- window(ausbeer,start=1992)
ma4 <- ma(beer2, order=4, centre=FALSE)
ma2x4 <- ma(beer2, order=4, centre=TRUE)
autoplot(beer2, series="Data") +
autolayer(ma4, series="4-MA") +
autolayer(ma2x4, series="2-MAx4") +
xlab("Year") + ylab("Production")
library(fpp2)
autoplot(fc) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
autoplot(fc) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
oildata <- window(oil, start=1996)
# Estimate parameters
fc <- ses(oildata, h=5)
autoplot(fc) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
library(fpp2)
help(gas)
help(gas)
help gold
help(gold)
help(gas)
autoplot(gas)
autoplot(gold)
autoplot(chicken)
forecast(chicken)
autoplot(forecast(chicken), PI=TRUE)
data <- window(chicken, start=1960)
# Estimate parameters
fc <- forecast(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy") +
ylab("Oil (millions of tonnes)") + xlab("Year")
help(chicken)
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy") +
ylab("Ceny kurczaków w USA") + xlab("Year")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
library(fpp2)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
data <- read.csv("D:\Studia\Praca dyplomowa\pliki\dane_polska.xlsx")
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska.xlsx")
print(data)
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv")
print(data)
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv")
print(data$zachorowania)
help("read.csv")
print(data)
read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv", sep=";")
print(head(data)
)
data
head(data)
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv", sep=";")
clc
clear()
erase()
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv", sep=";")
data
head(data)
head(data$zachorowania)
plot(data$zachorowania, type="l")
is.ts(data)
inds <- seq(as.Date("2014-06-01"), as.Date("2015-10-14"), by = "day")
inds <- seq(as.Date("2020-03-05"), as.Date("2021-09-30"), by = "day")
c(2014, as.numeric(format(inds[1], "%j"))
)
inds
format(inds[1], "%j")
format(inds[1])
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
sum(month_days)
day_in_year
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
return day_in_year
}
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break;
day_in_year <- day_in_year + month_days[i];
}
return day_in_year
}
day_of_year_number <- function(date) {
date <- as.Date(date);
month_number <- as.numeric(format(date, "%m"));
day_number <- as.numeric(format(date, "%d"));
year_number <- as.numeric(format(date, "%y"));
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
day_in_year <- day_number;
for (i in 1:month_number) {
if(i==month_number)
break;
day_in_year <- day_in_year + month_days[i];
}
return day_in_year;
}
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
}
day_of_year_number("2016-01-02")
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
return(day_in_year)
}
day_of_year_number("2016-01-02")
day_of_year_number("2014-06-01")
day_of_year_number("2014-12-12")
day_of_year_number("2014-12-31")
day_of_year_number("2014-01-01")
!5
!0
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30);
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
if (!year_number %% 4 && month_number > 2)
day_in_year <- day_in_year + 1
return(day_in_year)
}
day_of_year_number("2013-03-01")
day_of_year_number("2012-03-01")
day_of_year_number("2012-0")
rm(inds)
rm(fc)
rm(month_days)
View(day_of_year_number)
View(data)
rm(data)
View(day_of_year_number)
save.image("D:/Studia/Praca dyplomowa/pliki/day_of_year_number_function.RData")
setwd("D:/Studia/Praca dyplomowa/R/rstudio-prognozowanie/pliki")
load("D:/Studia/Praca dyplomowa/R/rstudio-prognozowanie/pliki/.RData")
ggseasonplot(covid_poland_ts7[, "confirmed"])
library(fpp2)
ggseasonplot(covid_poland_ts7[, "confirmed"])
ggseasonplot(confirmed7_1)
ggseasonplot(confirmed7_1, year.labels = TRUE)
ggseasonplot(confirmed7_1, year.labels = TRUE, year.labels.left = TRUE)
ggseasonplot(covid_poland_ts7[, "confirmed"], polar = TRUE)
ggseasonplot(confirmed7_1, polar = TRUE, year.labels = TRUE, year.labels.left = TRUE)
ggseasonplot(confirmed7_1, polar = TRUE)
ggsubseriesplot(confirmed7_1)
ggseasonplot(confirmed7_2, year.labels = TRUE, year.labels.left = TRUE)
ggseasonplot(confirmed7_2, polar = TRUE)
ggsubseriesplot(confirmed7_2)
plot(confirmed7_1)
ggseasonplot(confirmed7_1, year.labels = TRUE, year.labels.left = TRUE)
ggseasonplot(confirmed7_4, year.labels = TRUE, year.labels.left = TRUE)
ggseasonplot(window(confirmed7_4, start = weekly_freq_day_number(250)), year.labels = TRUE, year.labels.left = TRUE)
ggseasonplot(window(confirmed7_4, start = weekly_freq_day_number(250)))
plot(confirmed7_1, main = "Wykres czasowy zachorowań do I fali")
plot(confirmed7_1, main = "Wykres czasowy zachorowań do I fali", xlab = "tydzień", ylab = "liczba zachorowań")
plot(confirmed7_1, main = "Wykres czasowy śmierci do I fali", xlab = "tydzień", ylab = "liczba śmierci")
plot(deaths7_1, main = "Wykres czasowy śmierci do I fali", xlab = "tydzień", ylab = "liczba śmierci")
plot(confirmed7_2, main = "Wykres czasowy zachorowań do II fali", xlab = "tydzień", ylab = "liczba zachorowań")
plot(deaths7_2, main = "Wykres czasowy śmierci do II fali", xlab = "tydzień", ylab = "liczba śmierci")
#wykres czasowy
plot(covid_poland_ts365, main = "Wykresy czasowe", ylab = "a", xlab = "czas")
plot(deaths7_3, main = "Wykres czasowy śmierci do III fali", xlab = "tydzień", ylab = "liczba śmierci")
plot(deaths7_4, main = "Wykres czasowy śmierci do IV fali", xlab = "tydzień", ylab = "liczba śmierci")
#wykresy sezonowe
ggseasonplot(confirmed7_1, year.labels = TRUE, year.labels.left = TRUE)
#wykresy sezonowe
ggseasonplot(confirmed7_1, year.labels = TRUE, year.labels.left = TRUE, main = "Wykres sezonowy zachorowań do I fali")
+ xlab("dzień tygodnia") + ylab("liczba zachorowań")
#wykresy sezonowe
ggseasonplot(confirmed7_1, year.labels = TRUE, year.labels.left = TRUE, main = "Wykres sezonowy zachorowań do I fali") +
xlab("dzień tygodnia") + ylab("liczba zachorowań")
#wykresy sezonowe
ggseasonplot(confirmed7_1, year.labels = TRUE, year.labels.left = TRUE) +
ggtitle("Wykres sezonowy zachorowań do I fali") + xlab("dzień tygodnia") + ylab("liczba zachorowań")
ggseasonplot(confirmed7_1, polar = TRUE)
help("ggseasonplot")
#wykresy sezonowe
ggseasonplot(confirmed7_1, year.labels = TRUE, year.labels.left = TRUE) +
ggtitle("Wykres sezonowy zachorowań do I fali") + xlab("dzień tygodnia") + ylab("liczba zachorowań")
ggseasonplot(confirmed7_1, polar = TRUE)
ggseasonplot(confirmed7_1, polar = TRUE, main = "Wykres sezonowy zachorowań do I fali")
ggsubseriesplot(confirmed7_1)
ggsubseriesplot(confirmed7_1, main = "Podwykresy sezonowe zachorowań do I fali")
ggseasonplot(confirmed7_1, polar = TRUE, main = "Wykres sezonowy zachorowań do I fali")
ggseasonplot(confirmed7_1, polar = TRUE, main = "Wykres sezonowy zachorowań do I fali", xlab = "")
ggsubseriesplot(confirmed7_1, main = "Podwykresy sezonowe zachorowań do I fali") +
ggtitle("Podwykresy sezonowe zachorowań do I fali") + xlab("dzień tygodnia") + ylab("liczba zachorowań")
help("qplot")
#wykresy rozrzutu
qplot(tests7_1, confirmed7_1) +
ylab("Demand (GW)") + xlab("Temperature (Celsius)")
#wykresy rozrzutu
qplot(tests7_1, confirmed7_1, xlab = "liczba testóW", ylab = "liczba zachorowań")
#wykresy rozrzutu
qplot(tests7_4, confirmed7_4, xlab = "liczba testóW", ylab = "liczba zachorowań")
qplot(tests7_2, confirmed7_2, xlab = "liczba testóW", ylab = "liczba zachorowań")
#wykresy rozrzutu
qplot(tests7_1, confirmed7_1, xlab = "liczba testóW", ylab = "liczba zachorowań")
qplot(tests7_2, confirmed7_2, xlab = "liczba testóW", ylab = "liczba zachorowań")
install.packages("GGally")
library(GGally)
ggpairs(as.data.frame(cbind(confirmed7_1, test7_1)))
ggpairs(as.data.frame(cbind(confirmed7_1, tests7_1)))
ggpairs(as.data.frame(cbind(confirmed7_1, tests7_1), names = c("zachorowania", "testy")))
ggpairs(as.data.frame(cbind(tests7_1, confirmed7_1)))
ggpairs(as.data.frame(cbind(tests7_4, confirmed7_4)))
ggpairs(as.data.frame(cbind(tests7_3, confirmed7_3)))
#wykresy opóźnień
gglagplot(confirmed7_1)
gglagplot(confirmed7_4)
gglagplot(window(confirmed7_4, start = weekly_freq_day_number(100), end = weekly_freq_day_number(200))
gglagplot(window(confirmed7_4, start = weekly_freq_day_number(100), end = weekly_freq_day_number(200)))
c <- window(confirmed7_4, start = weekly_freq_day_number(100), end = weekly_freq_day_number(200))
gglagplot(c)
rm(c)
ggAcf(confirmed7_1)
ggAcf(confirmed7_4)
ggPacf(confirmed7_1)
ggPacf(confirmed7_4)
ggPacf(confirmed7_2)
ggAcf(confirmed7_3)
ggAcf(confirmed7_2)
ggAcf(deaths7_4)
ggPacf(deaths7_4)
