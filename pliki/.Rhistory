autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE, divideTime=12) +
xlab("Year: 2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE) +
xlab("Year: 2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia") +
divideTime(12)
library(fpp2)
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
source("~/.active-rstudio-document")
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
library(fpp2)
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(usnetelec, BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(usnetelec)
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(c(usnetelec, BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(c(usnetelec, BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(c(usnetelec, BoxCox(usnetelec, lambdaus)))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(usnetelec) +
autolayer(BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(usnetelec)
autoplot(BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambda
lambda
autoplot(usnetelec)
autoplot(BoxCox(usnetelec, lambda))
usgdp %>% BoxCox.lambda() -> lambda
lambda
autoplot(usgdp)
autoplot(BoxCox(usgdp, lambda))
mcopper %>% BoxCox.lambda() -> lambda
lambda
autoplot(mcopper)
autoplot(BoxCox(mcopper, lambda))
enplanements %>% BoxCox.lambda() -> lambdaus
lambda
autoplot(enplanements)
autoplot(BoxCox(enplanements, lambda))
cangas %>% BoxCox.lambda() -> lambda
lambda
autoplot(cangas)
autoplot(BoxCox(cangas, lambda))
library(fpp2)
beer2 <- window(ausbeer,start=1992)
ma4 <- ma(beer2, order=4, centre=FALSE)
ma2x4 <- ma(beer2, order=4, centre=TRUE)
ma4
ma2x4
beer2 <- window(ausbeer,start=1992)
ma4 <- ma(beer2, order=4, centre=FALSE)
ma2x4 <- ma(beer2, order=4, centre=TRUE)
autoplot(beer2, series="Data") +
autolayer(ma4, series="4-MA") +
autolayer(ma2x4, series="2-MAx4") +
xlab("Year") + ylab("Production")
library(fpp2)
autoplot(fc) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
autoplot(fc) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
oildata <- window(oil, start=1996)
# Estimate parameters
fc <- ses(oildata, h=5)
autoplot(fc) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
library(fpp2)
help(gas)
help(gas)
help gold
help(gold)
help(gas)
autoplot(gas)
autoplot(gold)
autoplot(chicken)
forecast(chicken)
autoplot(forecast(chicken), PI=TRUE)
data <- window(chicken, start=1960)
# Estimate parameters
fc <- forecast(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy") +
ylab("Oil (millions of tonnes)") + xlab("Year")
help(chicken)
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy") +
ylab("Ceny kurczaków w USA") + xlab("Year")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
library(fpp2)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
data <- read.csv("D:\Studia\Praca dyplomowa\pliki\dane_polska.xlsx")
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska.xlsx")
print(data)
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv")
print(data)
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv")
print(data$zachorowania)
help("read.csv")
print(data)
read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv", sep=";")
print(head(data)
)
data
head(data)
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv", sep=";")
clc
clear()
erase()
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv", sep=";")
data
head(data)
head(data$zachorowania)
plot(data$zachorowania, type="l")
is.ts(data)
inds <- seq(as.Date("2014-06-01"), as.Date("2015-10-14"), by = "day")
inds <- seq(as.Date("2020-03-05"), as.Date("2021-09-30"), by = "day")
c(2014, as.numeric(format(inds[1], "%j"))
)
inds
format(inds[1], "%j")
format(inds[1])
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
sum(month_days)
day_in_year
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
return day_in_year
}
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break;
day_in_year <- day_in_year + month_days[i];
}
return day_in_year
}
day_of_year_number <- function(date) {
date <- as.Date(date);
month_number <- as.numeric(format(date, "%m"));
day_number <- as.numeric(format(date, "%d"));
year_number <- as.numeric(format(date, "%y"));
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
day_in_year <- day_number;
for (i in 1:month_number) {
if(i==month_number)
break;
day_in_year <- day_in_year + month_days[i];
}
return day_in_year;
}
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
}
day_of_year_number("2016-01-02")
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
return(day_in_year)
}
day_of_year_number("2016-01-02")
day_of_year_number("2014-06-01")
day_of_year_number("2014-12-12")
day_of_year_number("2014-12-31")
day_of_year_number("2014-01-01")
!5
!0
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30);
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
if (!year_number %% 4 && month_number > 2)
day_in_year <- day_in_year + 1
return(day_in_year)
}
day_of_year_number("2013-03-01")
day_of_year_number("2012-03-01")
day_of_year_number("2012-0")
rm(inds)
rm(fc)
rm(month_days)
View(day_of_year_number)
View(data)
rm(data)
View(day_of_year_number)
save.image("D:/Studia/Praca dyplomowa/pliki/day_of_year_number_function.RData")
setwd("D:/Studia/Praca dyplomowa/R/rstudio-prognozowanie/pliki")
load("D:/Studia/Praca dyplomowa/R/rstudio-prognozowanie/pliki/.RData")
library(forecast)
library(ggplot2)
library(expsmooth)
library(GGally)
library(pdp)
library(stats)
library(ggtext)
confirmed_forecasts <- list()
for(i in 1:length(c_time_series)) {
train <- window(c_time_series[[i]], end = weekly_freq_day_number(length(c_time_series[[i]]) - 30))
test <- window(c_time_series[[i]], start = weekly_freq_day_number(length(c_time_series[[i]]) - 29))
confirmed_forecasts[[i]] <- naive_forecasts(train, 30)
plot_title1 <- paste("Prognozy metody naiwnej liczby zakażeń dla ", i, " fali")
plot_title2 <- paste("Porównanie prognoz liczby zakażeń z szeregiem testowym dla ", i, " fali")
if(i != 4)
plot1 <- generate_naive_forecasts_plot2(train, confirmed_forecasts[[i]], plot_title1, "liczba zakażeń")
else
plot1 <- generate_naive_forecasts_plot2(window(train, start = weekly_freq_day_number(500)),
confirmed_forecasts[[i]], plot_title1, "liczba zakażeń")
plot2 <- generate_naive_test_comparison_plot2(test, confirmed_forecasts[[i]], plot_title2, "liczba zakażeń")
grid.arrange(grobs = list(plot1, plot2), ncol = 1)
}
rm(train, test, plot_title1, plot_title2, i, confirmed_forecasts)
confirmed_forecasts <- list()
for(i in 1:length(c_time_series)) {
train <- window(c_time_series[[i]], end = weekly_freq_day_number(length(c_time_series[[i]]) - 30))
test <- window(c_time_series[[i]], start = weekly_freq_day_number(length(c_time_series[[i]]) - 29))
confirmed_forecasts[[i]] <- naive_forecasts(train, 30)
plot_title1 <- paste("Prognozy metody naiwnej liczby zakażeń dla ", i, " fali")
plot_title2 <- paste("Porównanie prognoz liczby zakażeń z szeregiem testowym dla ", i, " fali")
if(i != 4)
plot1 <- generate_naive_forecasts_plot2(train, confirmed_forecasts[[i]], plot_title1, "liczba zakażeń")
else
plot1 <- generate_naive_forecasts_plot2(window(train, start = weekly_freq_day_number(500)),
confirmed_forecasts[[i]], plot_title1, "liczba zakażeń")
plot2 <- generate_naive_test_comparison_plot2(test, confirmed_forecasts[[i]], plot_title2, "liczba zakażeń")
grid.arrange(grobs = list(plot1, plot2), ncol = 1)
}
rm(train, test, plot_title1, plot_title2, i, confirmed_forecasts, plot1, plot2)
deaths_forecasts <- list()
for(i in 1:length(d_time_series)) {
train <- window(d_time_series[[i]], end = weekly_freq_day_number(length(d_time_series[[i]]) - 30))
test <- window(d_time_series[[i]], start = weekly_freq_day_number(length(d_time_series[[i]]) - 29))
deaths_forecasts[[i]] <- naive_forecasts(train, 30)
plot_title1 <- paste("Prognozy metody naiwnej liczby śmierci dla", i, "fali")
plot_title2 <- paste("Porównanie prognoz liczby śmierci z szeregiem testowym dla", i, "fali")
if(i != 4)
plot1 <- generate_naive_forecasts_plot2(train, deaths_forecasts[[i]], plot_title1, "liczba śmierci")
else
plot1 <- generate_naive_forecasts_plot2(window(train, start = weekly_freq_day_number(500)),
deaths_forecasts[[i]], plot_title1, "liczba śmierci")
plot2 <- generate_naive_test_comparison_plot2(test, deaths_forecasts[[i]], plot_title2, "liczba śmierci")
grid.arrange(grobs = list(plot1, plot2), ncol = 1)
}
rm(train, test, plot_title1, plot_title2, i, deaths_forecasts)
calculate_ex_post_errors2 <- function(forecast, test_ts) {
n <- length(test_ts)
errors <- data.frame(
ME = 0, MAE = 0, MSE = 0, RMSE = 0, MAPE = 0
)
for(i in 1:n) {
e <- test_ts[i] - forecast$mean[i]
errors["ME"] <- errors["ME"] + e
errors["MAE"] <- errors["MAE"] + abs(e)
errors["MSE"] <- errors["MSE"] + e*e
errors["MAPE"] <- errors["MAPE"] + abs(e)/test_ts[i]
}
errors["ME"] <- errors["ME"]/n
errors["MAE"] <- errors["MAE"]/n
errors["MSE"] <- errors["MSE"]/n
errors["RMSE"] <- sqrt(errors["MSE"])
errors["MAPE"] <- errors["MAPE"]/n*100
return(errors)
}
confirmed1.train <- window(confirmed1, end = weekly_freq_day_number(length(confirmed1) - 30))
confirmed1.test <- window(confirmed1, start = weekly_freq_day_number(length(confirmed1) - 29))
c1_naive_forecasts <- naive_forecasts(confirmed1.train, 30)
accuracy(c1_naive_forecasts$naive, confirmed1.test)
calculate_ex_post_errors2(c1_naive_forecasts$naive, confirmed1.test)
?data.frame
#funkcja obliczająca błędy ex post dla podanych prognoz i wartości testowych
calculate_ex_post_errors2 <- function(forecast, test_ts) {
n <- length(test_ts)
errors <- data.frame(
ME = 0, MAE = 0, MSE = 0, RMSE = 0, MAPE = 0, row.names = NULL
)
for(i in 1:n) {
e <- test_ts[i] - forecast$mean[i]
errors["ME"] <- errors["ME"] + e
errors["MAE"] <- errors["MAE"] + abs(e)
errors["MSE"] <- errors["MSE"] + e*e
errors["MAPE"] <- errors["MAPE"] + abs(e)/test_ts[i]
}
errors["ME"] <- errors["ME"]/n
errors["MAE"] <- errors["MAE"]/n
errors["MSE"] <- errors["MSE"]/n
errors["RMSE"] <- sqrt(errors["MSE"])
errors["MAPE"] <- errors["MAPE"]/n*100
return(errors)
}
calculate_ex_post_errors2(c1_naive_forecasts$naive, confirmed1.test)
calculate_ex_post_errors2 <- function(forecast, test_ts) {
n <- length(test_ts)
errors <- data.frame(
ME = 0, MAE = 0, MSE = 0, RMSE = 0, MAPE = 0
)
for(i in 1:n) {
e <- test_ts[i] - forecast$mean[i]
errors["ME"] <- errors["ME"] + e
errors["MAE"] <- errors["MAE"] + abs(e)
errors["MSE"] <- errors["MSE"] + e*e
errors["MAPE"] <- errors["MAPE"] + abs(e)/test_ts[i]
}
errors["ME"] <- errors["ME"]/n
errors["MAE"] <- errors["MAE"]/n
errors["MSE"] <- errors["MSE"]/n
errors["RMSE"] <- sqrt(errors["MSE"])
errors["MAPE"] <- errors["MAPE"]/n*100
return(errors)
}
calculate_ex_post_errors2(c1_naive_forecasts$naive, confirmed1.test)
accuracy(c1_naive_forecasts$naive, confirmed1.test)
#funkcja obliczająca błędy ex post dla podanych prognoz i wartości testowych
calculate_ex_post_errors <- function(forecast, test_ts) {
n <- length(test_ts)
errors <- data.frame(
ME = 0, MAE = 0, MSE = 0, RMSE = 0, MAPE = 0
)
for(i in 1:n) {
e <- test_ts[i] - forecast$mean[i]
errors["ME"] <- errors["ME"] + e
errors["MAE"] <- errors["MAE"] + abs(e)
errors["MSE"] <- errors["MSE"] + e*e
errors["MAPE"] <- errors["MAPE"] + abs(e)/test_ts[i]
}
errors["ME"] <- errors["ME"]/n
errors["MAE"] <- errors["MAE"]/n
errors["MSE"] <- errors["MSE"]/n
errors["RMSE"] <- sqrt(errors["MSE"])
errors["MAPE"] <- errors["MAPE"]/n*100
return(errors)
}
rm(calculate_ex_post_errors2())
rm(calculate_ex_post_errors2)
#Prognozy metod naiwnych liczby zakażeń dla I fali
confirmed1.train <- window(confirmed1, end = weekly_freq_day_number(length(confirmed1) - 30))
confirmed1.test <- window(confirmed1, start = weekly_freq_day_number(length(confirmed1) - 29))
c1_naive_forecasts <- naive_forecasts(confirmed1.train, 30)
plot_title1 <- "Prognozy metody naiwnej liczby zakażeń dla I fali"
plot_title2 <- "Porównanie prognoz liczby zakażeń z szeregiem testowym dla I fali"
generate_naive_forecasts_plot(confirmed1.train, c1_naive_forecasts, plot_title1, "liczba zakażeń")
generate_naive_test_comparison_plot(confirmed1.test, c1_naive_forecasts, plot_title2, "liczba zakażeń")
rm(confirmed1.train, confirmed1.test, c1_naive_forecasts, plot_title1, plot_title2)
#Prognozy metod naiwnych liczby zakażeń dla II fali
confirmed2.train <- window(confirmed2, end = weekly_freq_day_number(length(confirmed2) - 30))
confirmed2.test <- window(confirmed2, start = weekly_freq_day_number(length(confirmed2) - 29))
c2_naive_forecasts <- naive_forecasts(confirmed2.train, 30)
plot_title1 <- "Prognozy metody naiwnej liczby zakażeń dla II fali"
plot_title2 <- "Porównanie prognoz liczby zakażeń z szeregiem testowym dla II fali"
generate_naive_forecasts_plot(confirmed2.train, c2_naive_forecasts, plot_title1, "liczba zakażeń")
generate_naive_test_comparison_plot(confirmed2.test, c2_naive_forecasts, plot_title2, "liczba zakażeń")
rm(confirmed2.train, confirmed2.test, c2_naive_forecasts, plot_title1, plot_title2)
#Prognozy metod naiwnych liczby zakażeń dla III fali
confirmed3.train <- window(confirmed3, end = weekly_freq_day_number(length(confirmed3) - 30))
confirmed3.test <- window(confirmed3, start = weekly_freq_day_number(length(confirmed3) - 29))
c3_naive_forecasts <- naive_forecasts(confirmed3.train, 30)
plot_title1 <- "Prognozy metody naiwnej liczby zakażeń dla III fali"
plot_title2 <- "Porównanie prognoz liczby zakażeń z szeregiem testowym dla III fali"
generate_naive_forecasts_plot(confirmed3.train, c3_naive_forecasts, plot_title1, "liczba zakażeń")
generate_naive_test_comparison_plot(confirmed3.test, c3_naive_forecasts, plot_title2, "liczba zakażeń")
rm(confirmed3.train, confirmed3.test, c3_naive_forecasts, plot_title1, plot_title2)
#Prognozy metod naiwnych liczby zakażeń dla IV fali
confirmed4.train <- window(confirmed4, end = weekly_freq_day_number(length(confirmed4) - 30))
confirmed4.test <- window(confirmed4, start = weekly_freq_day_number(length(confirmed4) - 29))
c4_naive_forecasts <- naive_forecasts(confirmed4.train, 30)
plot_title1 <- "Prognozy metody naiwnej liczby zakażeń dla IV fali"
plot_title2 <- "Porównanie prognoz liczby zakażeń z szeregiem testowym dla IV fali"
generate_naive_forecasts_plot(window(confirmed4.train, start = weekly_freq_day_number(500)),
c4_naive_forecasts, plot_title1, "liczba zakażeń")
generate_naive_test_comparison_plot(confirmed4.test, c4_naive_forecasts, plot_title2, "liczba zakażeń")
rm(confirmed4.train, confirmed4.test, c4_naive_forecasts, plot_title1, plot_title2)
