ggtitle("Half-hourly electricity demand: Victoria, Australia")
autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE, year.labels=TRUE) +
xlab("Year: 2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE, month.labels=TRUE) +
xlab("Year: 2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE, year.labels=TRUE) +
xlab("Year: 2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE, divideTime=12) +
xlab("Year: 2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE) +
xlab("Year: 2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia") +
divideTime(12)
library(fpp2)
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
source("~/.active-rstudio-document")
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
fc <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80)
fc2 <- rwf(eggs, drift=TRUE, lambda=0, h=50, level=80,
biasadj=TRUE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE)
autoplot(eggs) +
autolayer(fc, series="Simple back transformation") +
autolayer(fc2, series="Bias adjusted", PI=FALSE) +
guides(colour=guide_legend(title="Forecast"))
library(fpp2)
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(usnetelec, BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(usnetelec)
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(c(usnetelec, BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(c(usnetelec, BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(c(usnetelec, BoxCox(usnetelec, lambdaus)))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(usnetelec) +
autolayer(BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambdaus
lambdaus
autoplot(usnetelec)
autoplot(BoxCox(usnetelec, lambdaus))
usnetelec %>% BoxCox.lambda() -> lambda
lambda
autoplot(usnetelec)
autoplot(BoxCox(usnetelec, lambda))
usgdp %>% BoxCox.lambda() -> lambda
lambda
autoplot(usgdp)
autoplot(BoxCox(usgdp, lambda))
mcopper %>% BoxCox.lambda() -> lambda
lambda
autoplot(mcopper)
autoplot(BoxCox(mcopper, lambda))
enplanements %>% BoxCox.lambda() -> lambdaus
lambda
autoplot(enplanements)
autoplot(BoxCox(enplanements, lambda))
cangas %>% BoxCox.lambda() -> lambda
lambda
autoplot(cangas)
autoplot(BoxCox(cangas, lambda))
library(fpp2)
beer2 <- window(ausbeer,start=1992)
ma4 <- ma(beer2, order=4, centre=FALSE)
ma2x4 <- ma(beer2, order=4, centre=TRUE)
ma4
ma2x4
beer2 <- window(ausbeer,start=1992)
ma4 <- ma(beer2, order=4, centre=FALSE)
ma2x4 <- ma(beer2, order=4, centre=TRUE)
autoplot(beer2, series="Data") +
autolayer(ma4, series="4-MA") +
autolayer(ma2x4, series="2-MAx4") +
xlab("Year") + ylab("Production")
library(fpp2)
autoplot(fc) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
autoplot(fc) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
oildata <- window(oil, start=1996)
# Estimate parameters
fc <- ses(oildata, h=5)
autoplot(fc) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
library(fpp2)
help(gas)
help(gas)
help gold
help(gold)
help(gas)
autoplot(gas)
autoplot(gold)
autoplot(chicken)
forecast(chicken)
autoplot(forecast(chicken), PI=TRUE)
data <- window(chicken, start=1960)
# Estimate parameters
fc <- forecast(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(fitted(fc), series="Fitted") +
ylab("Oil (millions of tonnes)") + xlab("Year")
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy") +
ylab("Oil (millions of tonnes)") + xlab("Year")
help(chicken)
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy") +
ylab("Ceny kurczaków w USA") + xlab("Year")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
library(fpp2)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
data <- window(chicken, start=1960)
# Estimate parameters
fc <- naive(data, h=10)
autoplot(fc, PI=TRUE) +
autolayer(data, series="szereg czasowy", color = "black") +
ylab("Ceny kurczaków w USA") + xlab("Rok")
data <- read.csv("D:\Studia\Praca dyplomowa\pliki\dane_polska.xlsx")
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska.xlsx")
print(data)
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv")
print(data)
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv")
print(data$zachorowania)
help("read.csv")
print(data)
read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv", sep=";")
print(head(data)
)
data
head(data)
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv", sep=";")
clc
clear()
erase()
data <- read.csv("D:/Studia/Praca dyplomowa/pliki/dane_polska_csv.csv", sep=";")
data
head(data)
head(data$zachorowania)
plot(data$zachorowania, type="l")
is.ts(data)
inds <- seq(as.Date("2014-06-01"), as.Date("2015-10-14"), by = "day")
inds <- seq(as.Date("2020-03-05"), as.Date("2021-09-30"), by = "day")
c(2014, as.numeric(format(inds[1], "%j"))
)
inds
format(inds[1], "%j")
format(inds[1])
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
sum(month_days)
day_in_year
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
return day_in_year
}
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break;
day_in_year <- day_in_year + month_days[i];
}
return day_in_year
}
day_of_year_number <- function(date) {
date <- as.Date(date);
month_number <- as.numeric(format(date, "%m"));
day_number <- as.numeric(format(date, "%d"));
year_number <- as.numeric(format(date, "%y"));
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
day_in_year <- day_number;
for (i in 1:month_number) {
if(i==month_number)
break;
day_in_year <- day_in_year + month_days[i];
}
return day_in_year;
}
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
}
day_of_year_number("2016-01-02")
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
return(day_in_year)
}
day_of_year_number("2016-01-02")
day_of_year_number("2014-06-01")
day_of_year_number("2014-12-12")
day_of_year_number("2014-12-31")
day_of_year_number("2014-01-01")
!5
!0
day_of_year_number <- function(date) {
date <- as.Date(date)
month_number <- as.numeric(format(date, "%m"))
day_number <- as.numeric(format(date, "%d"))
year_number <- as.numeric(format(date, "%y"))
month_days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30);
day_in_year <- day_number
for (i in 1:month_number) {
if(i==month_number)
break
day_in_year <- day_in_year + month_days[i]
}
if (!year_number %% 4 && month_number > 2)
day_in_year <- day_in_year + 1
return(day_in_year)
}
day_of_year_number("2013-03-01")
day_of_year_number("2012-03-01")
day_of_year_number("2012-0")
rm(inds)
rm(fc)
rm(month_days)
View(day_of_year_number)
View(data)
rm(data)
View(day_of_year_number)
save.image("D:/Studia/Praca dyplomowa/pliki/day_of_year_number_function.RData")
setwd("D:/Studia/Praca dyplomowa/R/rstudio-prognozowanie/pliki")
load("D:/Studia/Praca dyplomowa/R/rstudio-prognozowanie/pliki/.RData")
library(forecast)
library(ggplot2)
library(expsmooth)
library(GGally)
library(pdp)
library(stats)
library(ggtext)
x_values <- c("Nie", "Pon", "Wto", "Śro", "Czw", "Pią", "Sob")
confirmed_season_plots <- list()
title_size <- 12
i <- 1
begin <- 1;
finish <- begin + 99
while(begin < length(data[, 1])) {
if(finish > length(data[, 1]))
finish = length(data[, 1])
confirmed_ts <- window(confirmed, start = weekly_freq_day_number(begin), end = weekly_freq_day_number(finish))
date_window <- window(data$date, start = begin, end = finish)
title_time <- paste(data$date[begin], " do ", data$date[finish])
confirmed_season_plots[[i]] <- ggseasonplot(confirmed_ts, year.labels = TRUE, year.labels.left = TRUE, season.labels = x_values) +
theme(plot.title = element_text(size = title_size)) +
ggtitle(paste("Wykres sezonowy liczby zakażeń od ", title_time)) + xlab("dzień tygodnia") + ylab("liczba zakażeń")
begin <- finish + 1
finish <- begin + 99
i <- i + 1
}
grid.arrange(grobs = confirmed_season_plots, ncol = 2)
x_values <- c("Nie", "Pon", "Wto", "Śro", "Czw", "Pią", "Sob")
confirmed_season_plots <- list()
title_size <- 10
i <- 1
begin <- 1;
finish <- begin + 99
while(begin < length(data[, 1])) {
if(finish > length(data[, 1]))
finish = length(data[, 1])
confirmed_ts <- window(confirmed, start = weekly_freq_day_number(begin), end = weekly_freq_day_number(finish))
date_window <- window(data$date, start = begin, end = finish)
title_time <- paste(data$date[begin], " do ", data$date[finish])
confirmed_season_plots[[i]] <- ggseasonplot(confirmed_ts, year.labels = TRUE, year.labels.left = TRUE, season.labels = x_values) +
theme(plot.title = element_text(size = title_size)) +
ggtitle(paste("Wykres sezonowy liczby zakażeń od ", title_time)) + xlab("dzień tygodnia") + ylab("liczba zakażeń")
begin <- finish + 1
finish <- begin + 99
i <- i + 1
}
grid.arrange(grobs = confirmed_season_plots, ncol = 2)
rm(begin, finish, i, x_values, title_time, confirmed_time_plots, confirmed_season_plots, deaths_time_plots, deaths_season_plots,
confirmed_ts, deaths_ts, date_window, x_labs, tests_time_plots, tests_season_plots, tests_ts, title_size)
confirmed_season_plots <- list()
x_values <- c("Nie", "Pon", "Wto", "Śro", "Czw", "Pią", "Sob")
title_size <- 10
i <- 1
begin <- 1;
finish <- begin + 99
while(begin < length(data[, 1])) {
if(finish > length(data[, 1]))
finish = length(data[, 1])
confirmed_ts <- window(confirmed, start = weekly_freq_day_number(begin), end = weekly_freq_day_number(finish))
title_time <- paste(data$date[begin], " do ", data$date[finish])
confirmed_season_plots[[i]] <- ggseasonplot(confirmed_ts, year.labels = TRUE, year.labels.left = TRUE, season.labels = x_values) +
theme(plot.title = element_text(size = title_size)) +
ggtitle(paste("Wykres sezonowy liczby zakażeń od ", title_time)) + xlab("dzień tygodnia") + ylab("liczba zakażeń")
begin <- finish + 1
finish <- begin + 99
i <- i + 1
}
grid.arrange(grobs = confirmed_season_plots, ncol = 2)
rm(begin, finish, i, x_values, title_time, confirmed_time_plots, confirmed_season_plots, deaths_time_plots, deaths_season_plots,
confirmed_ts, deaths_ts, date_window, x_labs, tests_time_plots, tests_season_plots, tests_ts, title_size)
?ggseasonplot
confirmed_season_plots <- list()
x_values <- c("Nie", "Pon", "Wto", "Śro", "Czw", "Pią", "Sob")
title_size <- 10
i <- 1
begin <- 1;
finish <- begin + 99
while(begin < length(data[, 1])) {
if(finish > length(data[, 1]))
finish = length(data[, 1])
confirmed_ts <- window(confirmed, start = weekly_freq_day_number(begin), end = weekly_freq_day_number(finish))
title_time <- paste(data$date[begin], " do ", data$date[finish])
confirmed_season_plots[[i]] <- ggseasonplot(confirmed_ts, year.labels = TRUE, year.labels.left = TRUE, season.labels = x_values,
labelgap = 3) +
theme(plot.title = element_text(size = title_size)) +
ggtitle(paste("Wykres sezonowy liczby zakażeń od ", title_time)) + xlab("dzień tygodnia") + ylab("liczba zakażeń")
begin <- finish + 1
finish <- begin + 99
i <- i + 1
}
grid.arrange(grobs = confirmed_season_plots, ncol = 2)
rm(begin, finish, i, x_values, title_time, confirmed_time_plots, confirmed_season_plots, deaths_time_plots, deaths_season_plots,
confirmed_ts, deaths_ts, date_window, x_labs, tests_time_plots, tests_season_plots, tests_ts, title_size)
confirmed_season_plots <- list()
x_values <- c("Nie", "Pon", "Wto", "Śro", "Czw", "Pią", "Sob")
title_size <- 10
i <- 1
begin <- 1;
finish <- begin + 99
while(begin < length(data[, 1])) {
if(finish > length(data[, 1]))
finish = length(data[, 1])
confirmed_ts <- window(confirmed, start = weekly_freq_day_number(begin), end = weekly_freq_day_number(finish))
title_time <- paste(data$date[begin], " do ", data$date[finish])
confirmed_season_plots[[i]] <- ggseasonplot(confirmed_ts, year.labels = TRUE, year.labels.left = TRUE, season.labels = x_values) +
theme(plot.title = element_text(size = title_size)) +
ggtitle(paste("Wykres sezonowy liczby zakażeń od ", title_time)) + xlab("dzień tygodnia") + ylab("liczba zakażeń")
begin <- finish + 1
finish <- begin + 99
i <- i + 1
}
grid.arrange(grobs = confirmed_season_plots, ncol = 2)
rm(begin, finish, i, x_values, title_time, confirmed_time_plots, confirmed_season_plots, deaths_time_plots, deaths_season_plots,
confirmed_ts, deaths_ts, date_window, x_labs, tests_time_plots, tests_season_plots, tests_ts, title_size)
x_values <- c("Nie", "Pon", "Wto", "Śro", "Czw", "Pią", "Sob")
confirmed_time_plots <- list()
deaths_time_plots <- list()
tests_time_plots <- list()
confirmed_season_plots <- list()
deaths_season_plots <- list()
tests_season_plots <- list()
title_size <- 10
i <- 1
begin <- 1;
finish <- begin + 99
while(begin < length(data[, 1])) {
if(finish > length(data[, 1]))
finish = length(data[, 1])
confirmed_ts <- window(confirmed, start = weekly_freq_day_number(begin), end = weekly_freq_day_number(finish))
deaths_ts <- window(deaths, start = weekly_freq_day_number(begin), end = weekly_freq_day_number(finish))
tests_ts <- window(tests, start = weekly_freq_day_number(begin), end = weekly_freq_day_number(finish))
date_window <- window(data$date, start = begin, end = finish)
x_labs <- c(seq(date_window[1], date_window[length(date_window)], 20))
x_labs[length(x_labs) + 1] <- date_window[length(date_window)]
title_time <- paste(data$date[begin], " do ", data$date[finish])
confirmed_time_plots[[i]] <- ggplot(data = data.frame(x = date_window, y = confirmed_ts), aes(x, y)) +
geom_line() +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby zakażeń od ", title_time), x = "data", y = "liczba zakażeń") +
theme(plot.title = element_text(size = title_size), axis.text.x = element_markdown(angle = 45, hjust = 1))
deaths_time_plots[[i]] <- ggplot(data = data.frame(x = date_window, y = deaths_ts), aes(x, y)) +
geom_line() +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby śmierci od ", title_time), x = "data", y = "liczba śmierci") +
theme(plot.title = element_text(size = title_size), axis.text.x = element_markdown(angle = 45, hjust = 1))
tests_time_plots[[i]] <- ggplot(data = data.frame(x = date_window, y = tests_ts), aes(x, y)) +
geom_line() +
scale_x_date(breaks = x_labs, labels = x_labs, date_labels = "%d-%m-%Y") +
labs(title = paste("Wykres czasowy liczby testów od ", title_time), x = "data", y = "liczba testów") +
theme(plot.title = element_text(size = title_size), axis.text.x = element_markdown(angle = 45, hjust = 1))
confirmed_season_plots[[i]] <- ggseasonplot(confirmed_ts, year.labels = TRUE, year.labels.left = TRUE, season.labels = x_values) +
theme(plot.title = element_text(size = title_size)) +
ggtitle(paste("Wykres sezonowy liczby zakażeń od ", title_time)) + xlab("dzień tygodnia") + ylab("liczba zakażeń")
deaths_season_plots[[i]] <- ggseasonplot(deaths_ts, year.labels = TRUE, year.labels.left = TRUE, season.labels = x_values) +
theme(plot.title = element_text(size = title_size)) +
ggtitle(paste("Wykres sezonowy liczby śmierci od ", title_time)) + xlab("dzień tygodnia") + ylab("liczba śmierci")
tests_season_plots[[i]] <- ggseasonplot(tests_ts, year.labels = TRUE, year.labels.left = TRUE, season.labels = x_values) +
theme(plot.title = element_text(size = title_size)) +
ggtitle(paste("Wykres sezonowy liczby testów od ", title_time)) + xlab("dzień tygodnia") + ylab("liczba testów")
begin <- finish + 1
finish <- begin + 99
i <- i + 1
}
grid.arrange(grobs = confirmed_time_plots, ncol = 2)
grid.arrange(grobs = deaths_time_plots, ncol = 2)
grid.arrange(grobs = tests_time_plots, ncol = 2)
grid.arrange(grobs = confirmed_season_plots, ncol = 2)
grid.arrange(grobs = deaths_season_plots, ncol = 2)
grid.arrange(grobs = tests_season_plots, ncol = 2)
rm(begin, finish, i, x_values, title_time, confirmed_time_plots, confirmed_season_plots, deaths_time_plots, deaths_season_plots,
confirmed_ts, deaths_ts, date_window, x_labs, tests_time_plots, tests_season_plots, tests_ts, title_size)
